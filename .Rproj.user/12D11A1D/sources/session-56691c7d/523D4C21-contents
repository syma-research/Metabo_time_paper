---
title: "Perform orthogonal partial least squared analysis using NMR data"
format: html
---

```{r setup}
rm(list = ls())
library(ggplot2)
library(magrittr)
library(tidyverse)
library(metabom8)
dir_output <- "results/1.0_opls"
dir.create(dir_output, recursive = TRUE, showWarnings = FALSE)
```

```{r data}
source("R/functions_ruben.R")
load("data/combined.RData")
use_vars <- readxl::read_xlsx(
  "data/from_ruben/bioGUNE_and_VUMC_data_20230124.xlsx", 
  sheet = "use_vars") %>% 
  {.$code}

df_combined <- df_combined %>% 
  dplyr::filter(!apply(is.na(df_combined[, use_vars]), 1, any)) %>% 
  dplyr::filter(!is.na(covid_group)) %>% 
  dplyr::filter(covid_group != "ny_non_covid") %>% 
  dplyr::filter(cohort != "VUMC") %>% 
  dplyr::mutate(cohort = factor(cohort, levels = c("NY", "SP")))
df_combined_model <- df_combined %>% 
  dplyr::filter(covid_group %in% c("Control", "Acute")) %>% 
  dplyr::mutate(covid_outcome = factor(covid_group, levels = c("Control", "Acute")))
```

```{r CV for AUC}
# CV splits
K <- 10
n <- nrow(df_combined_model)
set.seed(0)
folds <- caret::createFolds(y = df_combined_model$covid_outcome, k = K)
fitted_cv <- seq(1, K) %>% 
  purrr::map_dfr(function(i_k) {
    i_df_combined_train <- df_combined_model[setdiff(seq(1, n), folds[[i_k]]), ]
    
    # lm analysis
    lm_results <- get_lm_analysis(
      i_df_combined_train, "covid_group", ref_group = "Control",
      variables = use_vars, covariant_string = "+sex+age_group", 
      adjust_method = "fdr")
    covid_univ_analysis <-
      lm_results %>%
      select(variable, ends_with("sd_coef")) %>%
      pivot_longer(-variable, names_to = "group", values_to = "estimate") %>%
      mutate(group = map_chr(strsplit(group, ".vs."), 1)) %>%
      inner_join(
        lm_results %>%
          select(variable, ends_with("sd_se")) %>%
          pivot_longer(-variable, names_to = "group", values_to = "se") %>%
          mutate(group = map_chr(strsplit(group, ".vs."), 1))
      ) %>%
      inner_join(
        lm_results %>%
          select(variable, ends_with("p_value")) %>%
          pivot_longer(-variable, names_to = "group", values_to = "pvalue") %>%
          mutate(group = map_chr(strsplit(group, ".vs."), 1))
      )
    univ_df <-
      covid_univ_analysis %>%
      filter(group == "Acute") %>%
      rename(effect = estimate) %>%
      select(variable, effect, pvalue)
    this_use_vars <- filter_variables(
      univ_df = univ_df, 
      min_effect = 0.5, max_pval = 0.05, 
      max_corr = 0.8, 
      this_data = df_combined_model)
    
    # opls analysis
    df <-
      i_df_combined_train %>%
      mutate_at(all_of(this_use_vars), function(x) log10(x + 1)) %>%
      droplevels()
    
    useX <- df %>% select(all_of(this_use_vars)) %>% as.matrix()
    rownames(useX) <- df$nmr_id
    useY <- df$covid_outcome
    
    covid_model <- opls(X = useX, 
                        Y = useY,
                        center = T,
                        scale = "UV",
                        cv = list(method = "k-fold", k = 5, split = 2/3), 
                        plotting = FALSE)
    
    
    i_df_combined_test <-
      df_combined_model[folds[[i_k]], ] %>%
      dplyr::select(all_of(this_use_vars)) %>%
      dplyr::mutate_all(function(x) log10(x + 1)) %>%
      as.matrix()
    predicted_covid <- predict_opls(covid_model, newdata = i_df_combined_test)
    return(
      tibble::tibble(
        y = df_combined_model[folds[[i_k]], ]$covid_outcome,
        y_pred = predicted_covid$Y_predicted,
        y_cont = predicted_covid$t_pred[, 1],
        i_test = folds[[i_k]],
        selected_vars = list(this_use_vars),
        fold = i_k
      )
    )
  })

roc_result <- pROC::roc(fitted_cv$y, fitted_cv$y_cont, auc = TRUE, ci = TRUE)
aucs <- round(roc_result$ci, digits = 3)
p_roc <- pROC::ggroc(roc_result) +
  geom_abline(intercept = 1, slope = 1, linetype = "dashed", 
              color = "black") +
  annotate(geom = "text", x = 0.05, y = 0.05, 
           label = paste0("AUC: ", aucs[2], "\n",
                          "95% CI: (", aucs[1], ", ", aucs[3], ")"),
           color="black",
           vjust = 0,
           hjust = 1) +
  theme_bw() +
  xlab("Specificity") +
  ylab("Sensitivity")
ggsave(p_roc, filename = paste0(dir_output, "/ROC.pdf"), 
       width = 2.5, height = 2.5)
```

```{r train model on full data}
lm_results <- get_lm_analysis(
  df_combined_model, "covid_group", ref_group = "Control",
  variables = use_vars, covariant_string = "+sex+age_group", 
  adjust_method = "fdr")
covid_univ_analysis <-
  lm_results %>%
  select(variable, ends_with("sd_coef")) %>%
  pivot_longer(-variable, names_to = "group", values_to = "estimate") %>%
  mutate(group = map_chr(strsplit(group, ".vs."), 1)) %>%
  inner_join(
    lm_results %>%
      select(variable, ends_with("sd_se")) %>%
      pivot_longer(-variable, names_to = "group", values_to = "se") %>%
      mutate(group = map_chr(strsplit(group, ".vs."), 1))
  ) %>%
  inner_join(
    lm_results %>%
      select(variable, ends_with("p_value")) %>%
      pivot_longer(-variable, names_to = "group", values_to = "pvalue") %>%
      mutate(group = map_chr(strsplit(group, ".vs."), 1))
  )
readr::write_csv(covid_univ_analysis, file = "results/1.0_opls/univ_de.csv")

univ_df <-
  covid_univ_analysis %>%
  filter(group == "Acute") %>%
  rename(effect = estimate) %>%
  select(variable, effect, pvalue)
this_use_vars <- filter_variables(
  univ_df = univ_df, 
  min_effect = 0.5, max_pval = 0.05, 
  max_corr = 0.8, 
  this_data = df_combined_model)

##### Model #####
df <-
  df_combined_model %>%
  mutate_at(all_of(this_use_vars), function(x) log10(x + 1)) %>%
  droplevels()

useX <- df %>% select(all_of(this_use_vars)) %>% as.matrix()
rownames(useX) <- df$nmr_id
useY <- df$covid_outcome

set.seed(0)
covid_model <- opls(X = useX, 
                    Y = useY,
                    center = T,
                    scale = "UV",
                    cv = list(method = "k-fold", k = 5, split = 2/3), 
                    plotting = FALSE)
save(covid_model, file = paste0(dir_output, "/covid_model.RData"))
roc_result <- pROC::roc(useY, covid_model@t_pred, auc = TRUE, ci = TRUE)
id_threshold <- which.max(roc_result$sensitivities+roc_result$specificities)[1]
obtained_threshold <- roc_result$thresholds[id_threshold]

colors <- palette.colors(n = 2, palette = "R4")
names(colors) <- c("Control", "Acute Covid")
p_opls <- tibble(t_pred = covid_model@t_pred, t_orth = covid_model@t_orth, 
                 group = useY %>% 
                   dplyr::recode("Acute" = "Acute Covid") %>% 
                   factor(levels = c("Control", "Acute Covid")), 
                 cohort = df$cohort) %>%
  ggplot(aes(x = t_pred, y = t_orth, col = group, shape = cohort)) +
  geom_point() +
  scale_color_manual(values = colors) +
  geom_vline(xintercept = obtained_threshold, linetype = "dashed") +
  labs(x = "NMR prediction axis", y = "NMR orthogonal axis") + 
  theme_bw() +
  # coord_fixed() +
  theme(legend.title = element_blank(),
        legend.position = c(1, 0),
        legend.justification = c(1, 0),
        legend.background = element_blank(),
        legend.box = "horizontal"
  ) 
ggsave(plot = p_opls, 
       filename = paste0(dir_output, "/scatter_train.pdf"), 
       width = 5, height = 5)

##### Variable effects #####
df_effects <- 
  tibble(
    variable = colnames(covid_model@X),
    value = -covid_model@p_pred[1, ],
    group = factor(ifelse(value > 0, "COVID\nincreased", "COVID\ndecreased"), 
                   levels = c("COVID\nincreased", "COVID\ndecreased"))
  ) 

source("R/lipid_names.R")
colors <- palette.colors(n = 3, palette = "R4")[-1]
names(colors) <- c("COVID\nincreased", "COVID\ndecreased")
p_effect <- df_effects %>% 
  dplyr::arrange(-abs(value)) %>% 
  dplyr::slice(seq(1, 20)) %>% 
  dplyr::left_join(df_lipid_mapping, by = c("variable" = "Key")) %>% 
  dplyr::mutate(variable_print = 
                  ifelse(is.na(variable_print), variable, variable_print)) %>% 
  dplyr::arrange(value) %>% 
  dplyr::mutate(variable_print = forcats::as_factor(variable_print)) %>% 
  ggplot(aes(x = value, y = variable_print, fill = group)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = colors) +
  theme_bw() +
  theme(legend.title = element_blank(),
        legend.position = c(1, 0),
        legend.background = element_blank(),
        legend.justification = c(1, 0),
        legend.key.size = unit(0.3, "cm")) +
  ylab("NMR analyte") +
  xlab("Coefficient for Acute COVID")
ggsave(p_effect, 
       filename = paste0(dir_output, "/effects.pdf"), 
       width = 5, height = 4)

##### Predictions #####
df_for_predict <-
  df_combined %>%
  dplyr::select(all_of(this_use_vars)) %>%
  dplyr::mutate_all(function(x) log10(x + 1)) %>%
  as.matrix()
predicted_covid <- predict_opls(covid_model, newdata = df_for_predict)

df_predicted <- 
  df_combined %>%
  bind_cols(
    tibble(
      t_pred = predicted_covid$t_pred[, 1],
      t_orth = predicted_covid$t_orth[, 1],
      pred = ifelse(t_pred > obtained_threshold, "Acute", "Control")
    )
  )
mean_control <- 
  df_predicted %>% 
  dplyr::filter(covid_group == "Control") %>% 
  {mean(.$t_pred)}
df_predicted <- 
  df_predicted %>%
  dplyr::mutate(`Metabo-time` = t_pred - mean_control)
save(df_predicted, file = "results/1.0_opls/predicted.RData")

colors <- colors <- palette.colors(n = 4, palette = "R4")[-3]
names(colors) <- c("Control", "Acute/short-term", "Long-term")
p_pred <- df_predicted %>%
  dplyr::mutate(group_plot = covid_group %>% 
                  dplyr::recode(
                    "Acute" = "Acute/short-term", 
                    "Short-term" = "Acute/short-term", 
                    "Long-term" = "Long-term"
                  ) %>% 
                  factor(levels = c("Control", "Acute/short-term", "Long-term"))) %>% 
  ggplot(aes(x = t_pred, y = t_orth, col = group_plot, shape = cohort)) +
  geom_point() +
  scale_color_manual(values = colors) +
  geom_vline(xintercept = obtained_threshold, linetype = "dashed") +
  labs(x = "NMR prediction axis", y = "NMR orthogonal axis") + 
  theme_bw() +
  # coord_fixed() +
  theme(legend.title = element_blank(),
        legend.position = c(0, 0),
        legend.justification = c(0, 0),
        legend.background = element_blank(),
        legend.box = "horizontal"
  ) 
ggsave(plot = p_pred,
       filename = paste0(dir_output, "/scatter_pred.pdf"),
       width = 5, height = 3.5)

colors <- palette.colors(n = 4, palette = "R4")[-3]
names(colors) <- c("Control", "Acute/short-term", "Long-term")
p_hist <- df_predicted %>% 
  dplyr::mutate(
    covid_group_combined = 
      dplyr::recode(
        covid_group, 
        "Acute" = "Acute/short-term",
        "Short-term" = "Acute/short-term") %>% 
      factor(levels = c("Acute/short-term", "Long-term", "Control"))) %>% 
  ggplot(aes(x = `Metabo-time`, color = covid_group_combined, fill = covid_group_combined)) +
  # geom_histogram(bins = 30) +
  geom_density(alpha = 0.5) +
  scale_color_manual(values = colors) +
  scale_fill_manual(values = colors) +
  facet_grid(covid_group_combined~., scales = "free_y") +
  geom_vline(xintercept = 0, linetype = "dashed") +
  theme_bw() +
  theme(legend.position = c(0, 1),
        legend.background = element_blank(),
        legend.justification = c(0, 1),
        legend.title = element_blank())  +
  xlab("Metabo-time") +
  ylab("Density")
ggsave(p_hist, filename = paste0(dir_output, "/hist.pdf"),
       width = 3, height = 4)

cor_kendall <- df_predicted %>% 
  dplyr::filter(covid_group != "Control") %>% 
  {cor.test(.$days_follow_up, .$`Metabo-time`, method = "kendall")}
p_time <- df_predicted %>% 
  dplyr::filter(covid_group != "Control") %>% 
  ggplot(aes(x = days_follow_up, y = `Metabo-time`)) +
  geom_point() +
  geom_smooth(method = "loess", span = 1) +
  annotate("text", x = 65, y = -12.5,
           label = paste0("Kendall's tau = ", round(cor_kendall$estimate, digits = 3), 
                          "\n", "p = ", formatC(cor_kendall$p.value, format = "e", digits = 2)),
           hjust = 0) +
  theme_bw() +
  xlab("Days since admission") +
  ylab("Metabo-time")
ggsave(p_time, 
       filename = paste0(dir_output, "/corr_time.pdf"),
       width = 3.5, height = 3.5)
```

```{r modeling of metabo-time with covariates}
# baseline testing
load("results/1.0_opls/predicted.RData")
df_predicted_test <- df_predicted %>% 
  dplyr::filter(covid_group == "Acute")
fit_lm <- lm(`Metabo-time` ~ severity_derived + cohort +
               age + sex + covid_vaccination + diabetes + hypertension, 
             data = df_predicted_test)
tb_fit <- as.data.frame(summary(fit_lm)$coef) %>% 
  tibble::rownames_to_column("Variable")
fit_lm2 <- lm(`Metabo-time` ~ severity_derived + 
               age + sex + bmi + covid_vaccination +
              diabetes + hypertension, 
             data = df_predicted_test)
tb_fit2 <- as.data.frame(summary(fit_lm2)$coef) %>% 
  tibble::rownames_to_column("Variable")
tb_write <- rbind(
  tb_fit %>% 
    dplyr::filter(Variable != "(Intercept)"),
  tb_fit2 %>% 
    dplyr::filter(Variable == "bmi")
) %>% 
  dplyr::mutate(
    Variable = Variable %>% 
      dplyr::recode_factor(
        severity_derivedsevere = "Severe infection vs. mild",
        age = "Age",
        sexM = "Sex (male vs. female)",
        bmi = "BMI",
        cohortSP = "Cohort (SP vs. NY)",
        covid_vaccination = "COVID-19 vaccine (vaccinated vs. non-vaccinated)",
        diabetes = "Diabetes (yes vs. no)",
        hypertension = "Hypertension (yes vs. no)",
      ),
    Notes = Variable %>% 
      dplyr::recode(
        `Severe infection vs. mild` = "Definition of severe infection in Methods.",
        `BMI` = "Only NY COVID-19 cohort had BMI information; analysis for BMI performed within NY.",
        `COVID-19 vaccine (vaccinated vs. non-vaccinated)` = 
          "NY cohort was before COVID-19 vaccines were available; only two subjects from SP were vaccinated.",
        .default = ""
      )
    ) %>% 
  dplyr::rename(`Estiamted effect` = Estimate,
                `Standard error` = `Std. Error`,
                `P-value` = `Pr(>|t|)`) %>% 
  dplyr::arrange(Variable) %>% 
  dplyr::select(Variable, `Estiamted effect`, `Standard error`, `P-value`, `Notes`) 

pval <- tb_write$`P-value`[1]
colors <- palette.colors(n = 3, palette = "R4")[-1]
names(colors) <- c("NY", "SP")
p_boxplot <- df_predicted_test %>% 
  dplyr::mutate(
    severity_plot = severity_derived %>% 
      dplyr::recode(mild = "Mild",
                    severe = "Severe") %>% 
      factor(levels = c("Mild", "Severe"))) %>% 
  ggplot(aes(x = severity_plot, y = `Metabo-time`, fill = cohort)) +
  geom_boxplot(outlier.shape = NA) + 
  geom_point(position = position_jitterdodge(jitter.width = 0.25, dodge.width = 0.75)) +
  scale_fill_manual(values = colors) +
  theme_bw() +
  theme(legend.position = "bottom",
        legend.title = element_blank(),
        axis.title.x = element_blank()) +
  ylim(c(-10.5, 1)) +
  geom_segment(aes(x = 0.9, y = 0.5, xend = 2.1, yend = 0.5)) +
  geom_segment(aes(x = 0.9, y = 0.25, xend = 0.9, yend = 0.5)) +
  geom_segment(aes(x = 2.1, y = 0.25, xend = 2.1, yend = 0.5)) +
  annotate(geom = "text", 
           label = paste0("Adjusted p = ", formatC(tb_fit$`Pr(>|t|)`[2], format = "e", digits = 2)),
           x = 1.5, 
           y = 0.75, vjust = 0, hjust = 0.5) +
  ylab("Metabo-time")
ggsave(p_boxplot, filename = "results/1.0_opls/plasmotime_test.pdf",
       width = 2.8, height = 3)

## Figure2
p_fig2 <- cowplot::plot_grid(
  cowplot::plot_grid(
    p_opls,
    cowplot::plot_grid(
      p_roc, 
      p_effect,
      labels = c("B", "C"),
      nrow = 1,
      align = "h",
      rel_widths = c(0.7, 1)
    ),
    labels = c("A", ""),
    ncol = 1,
    rel_heights = c(1, 0.7)
  ),
  p_hist,
  cowplot::plot_grid(
    p_time,
    p_boxplot,
    labels = c("E", "F"),
    ncol = 1, 
    align = "v",
    rel_heights = c(1, 1)
  ),
  labels = c("", "D", ""),
  nrow = 1,
  rel_widths = c(1, 0.5, 0.5),
  align = "h"
)
ggsave(p_fig2, filename = "results/figures/figure2/fig2.pdf",
       width = 12, height = 7)
```

```{r analyze with respect to time}
df_predicted_test <- df_predicted %>% 
  dplyr::filter(covid_group != "Control")

fit_lm <- lm(`Metabo-time` ~ days_follow_up + severity_derived + cohort +
               age + sex + covid_vaccination + diabetes + hypertension, 
             data = df_predicted_test)
fit_lmm <- lmerTest::lmer(
  `Metabo-time` ~ 
    days_follow_up + 
    severity_derived + 
    cohort +
    (1|patient_id), 
  data = df_predicted_test
)

# test random effects
lrt_re <- lmerTest::rand(fit_lmm)
tb_write <- rbind(
  tb_write,
  tibble::tibble(
    Variable = "Inter-subject variability",
    `Estiamted effect` = NA_real_,
    `Standard error` = NA_real_,
    `P-value` = lrt_re$`Pr(>Chisq)`[2],
    Notes = "Based on likelihood ratio test on subject-level random intercepts in linear mixed effects modeling. See Methods for details."
  )
)
readr::write_csv(tb_write, 
                 file = "results/supplementals/suppTable1.csv")

df_p_annotate <- 
  tibble::tibble(
    cohort = "SP",
    text = paste0("Individualized random intercept:\n",
                  "p=", round(lrt_re$`Pr(>Chisq)`[2], digits = 5)),
    x = 180,
    y = -9
  )
# plot individualized random intercept
p_individualized <- df_predicted_test %>% 
  ggplot(aes(x = days_follow_up, y = `Metabo-time`)) +
  geom_point(alpha = 0.5,
             aes(group = patient_id,
                 color = patient_id)) +
  geom_line(alpha = 0.5,
            aes(group = patient_id,
                 color = patient_id)) +
  facet_wrap(~cohort, scales = "free") +
  geom_text(aes(x = x, y = y, label = text),
            data = df_p_annotate,
            hjust = 1) +
  theme_bw() +
  theme(legend.position = "none") +
  xlab("Days since admission")
ggsave(p_individualized, filename = "results/supplementals/suppFig1.pdf",
       width = 6, height = 3)
```